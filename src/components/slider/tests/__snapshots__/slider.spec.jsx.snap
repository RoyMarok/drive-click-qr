// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<Slider /> Snapshot 1`] = `
.emotion-0 {
  position: relative;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-flex-wrap: nowrap;
  -webkit-flex-wrap: nowrap;
  -ms-flex-wrap: nowrap;
  flex-wrap: nowrap;
  width: 100%;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
  opacity: 1;
  -webkit-transition: 0.17s ease-in-out;
  transition: 0.17s ease-in-out;
}

.emotion-2 {
  position: relative;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  justify-content: space-between;
  border: solid 1px;
  border-radius: 4px;
  -webkit-transition: 0.17s ease box-shadow;
  transition: 0.17s ease box-shadow;
  height: 54px;
  border: solid 1px;
  padding: 0;
  padding-right: 16px;
  padding-left: 16px;
}

.emotion-2:hover {
  border: solid 1px;
}

.emotion-2:hover {
  border: solid 1px;
}

body:not(.pointer-events) .emotion-2:focus {
  box-shadow: inset 0px 0px 0px 1px;
}

.emotion-4 {
  -webkit-tap-highlight-color: transparent;
  border-radius: 4px;
  width: 100%;
  outline: none;
  display: block;
  font-weight: 500;
  background-color: transparent;
  -webkit-appearance: textfield;
  -moz-appearance: textfield;
  -ms-appearance: textfield;
  appearance: textfield;
  -webkit-appearance: none;
  -moz-appearance: none;
  -ms-appearance: none;
  appearance: none;
  margin: 0;
  margin-right: 0px;
  font-size: 15px;
  line-height: 20px;
}

.emotion-4::-ms-clear {
  display: none;
}

.emotion-4::-webkit-inner-spin-button,
.emotion-4::-webkit-outer-spin-button,
.emotion-4::-webkit-clear-button,
.emotion-4::-webkit-inner-spin-button,
.emotion-4::-webkit-calendar-picker-indicator {
  display: none;
}

.emotion-4:-webkit-autofill,
.emotion-4:-webkit-autofill:hover,
.emotion-4:-webkit-autofill:focus,
.emotion-4:-webkit-autofill:active {
  -webkit-text-fill-color: inherit;
  box-shadow: 0 0 0 1000px transparent inset;
  -webkit-transition: background-color 5000s ease-in-out 0s;
  transition: background-color 5000s ease-in-out 0s;
}

.emotion-6 {
  height: 4px;
  width: 100%;
  outline: none;
  position: absolute;
  -webkit-flex: none;
  -ms-flex: none;
  flex: none;
  bottom: 0;
  left: 0;
  margin-top: -4px;
  -webkit-transition: 0.17s ease-in-out;
  transition: 0.17s ease-in-out;
}

.emotion-8 {
  height: 24px;
  position: absolute;
  width: 100%;
  top: -10px;
  cursor: pointer;
  outline: none;
}

.emotion-10 {
  z-index: 1;
  height: 4px;
  width: NaN%;
  position: absolute;
  -webkit-transition: background-color 0.17s ease-in-out,border-color 0.17s ease-in-out,width 0.3s cubic-bezier(0.44, 0, 0.07, 1);
  transition: background-color 0.17s ease-in-out,border-color 0.17s ease-in-out,width 0.3s cubic-bezier(0.44, 0, 0.07, 1);
  top: 10px;
  border-bottom-left-radius: 4px;
  border-bottom-right-radius: 4px;
}

.emotion-12 {
  text-align: center;
  border: 4px solid;
  width: 20px;
  height: 20px;
  border-radius: 50%;
  position: absolute;
  top: 1px;
  left: NaN%;
  -webkit-transform: translateX(-50%);
  -moz-transform: translateX(-50%);
  -ms-transform: translateX(-50%);
  transform: translateX(-50%);
  z-index: 2;
  transform-origin: center;
  -webkit-transition: background-color 0.17s ease-in-out,border-color 0.17s ease-in-out,left 0.3s cubic-bezier(0.44, 0, 0.07, 1),-webkit-transform 0.3s cubic-bezier(0.44, 0, 0.07, 1);
  transition: background-color 0.17s ease-in-out,border-color 0.17s ease-in-out,left 0.3s cubic-bezier(0.44, 0, 0.07, 1),transform 0.3s cubic-bezier(0.44, 0, 0.07, 1);
}

.emotion-12:hover {
  -webkit-transform: translateX(-50%) scale(1.2);
  -moz-transform: translateX(-50%) scale(1.2);
  -ms-transform: translateX(-50%) scale(1.2);
  transform: translateX(-50%) scale(1.2);
  box-shadow: 0px 1px 2px undefined,0px 3px 6px undefined;
}

.emotion-12:active {
  -webkit-transform: translateX(-50%) scale(1.2);
  -moz-transform: translateX(-50%) scale(1.2);
  -ms-transform: translateX(-50%) scale(1.2);
  transform: translateX(-50%) scale(1.2);
  box-shadow: 0px 1px 2px undefined,0px 2px 4px undefined;
}

.emotion-14 {
  position: absolute;
  top: -2px;
  left: 0;
  width: 100%;
  line-height: 0;
  -webkit-transition: opacity 0.17s ease-in-out;
  transition: opacity 0.17s ease-in-out;
}

.emotion-16 {
  position: absolute;
  top: 12px;
  width: 2px;
  height: 4px;
  border-radius: 1px;
  -webkit-transform: translateX(-50%);
  -moz-transform: translateX(-50%);
  -ms-transform: translateX(-50%);
  transform: translateX(-50%);
  display: inline-block;
  margin-right: -2px;
  -webkit-transition: background-color 0.17s ease-in-out;
  transition: background-color 0.17s ease-in-out;
}

.emotion-34 {
  letter-spacing: -0.3px;
  text-align: left;
  font-weight: 400;
  font-size: 13px;
  line-height: 16px;
  margin: 0;
  margin-top: 8px;
  margin-bottom: 8px;
  padding: 0;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  justify-content: space-between;
}

<OmittedComponent
  error="errorValue"
  max={100}
  min={0}
  mode="segmented"
  onChange={[MockFunction]}
  prefix="prefix "
  step={10}
  suffix=" suffix"
  value="Value"
>
  <Component
    error="errorValue"
    max={100}
    min={0}
    mode="segmented"
    onChange={[MockFunction]}
    prefix="prefix "
    step={10}
    suffix=" suffix"
    value="Value"
  >
    <SliderStyled>
      <div
        className="emotion-0 emotion-1"
      >
        <TextFieldMasked
          error="errorValue"
          inputMode="decimal"
          maskOptions={
            Object {
              "blocks": Object {
                "num": Object {
                  "commit": [Function],
                  "mask": [Function],
                  "max": 100,
                  "min": 0,
                  "normalizeZeros": false,
                  "padFractionalZeros": false,
                  "radix": ",",
                  "scale": 2,
                  "signed": undefined,
                  "thousandsSeparator": " ",
                },
              },
              "lazy": false,
              "mask": "prefix num suffix",
            }
          }
          onBlur={[Function]}
          onChange={[MockFunction]}
          onFocus={[Function]}
          size="md"
          value="Value"
        >
          <IMask(Component)
            blocks={
              Object {
                "num": Object {
                  "commit": [Function],
                  "mask": [Function],
                  "max": 100,
                  "min": 0,
                  "normalizeZeros": false,
                  "padFractionalZeros": false,
                  "radix": ",",
                  "scale": 2,
                  "signed": undefined,
                  "thousandsSeparator": " ",
                },
              }
            }
            error="errorValue"
            inputMode="decimal"
            lazy={false}
            mask="prefix num suffix"
            onAccept={[Function]}
            onBlur={[Function]}
            onFocus={[Function]}
            onKeyPress={[Function]}
            size="md"
            unmask={true}
            value="Value"
          >
            <Component
              defaultValue="Value"
              error="errorValue"
              inputMode="decimal"
              inputRef={[Function]}
              onBlur={[Function]}
              onFocus={[Function]}
              onKeyPress={[Function]}
              size="md"
            >
              <OmittedComponent
                defaultValue="Value"
                error="errorValue"
                inputMode="decimal"
                onBlur={[Function]}
                onFocus={[Function]}
                onKeyPress={[Function]}
                refWrapper={[Function]}
                size="md"
              >
                <Component
                  defaultValue="Value"
                  error="errorValue"
                  inputMode="decimal"
                  onBlur={[Function]}
                  onFocus={[Function]}
                  onKeyPress={[Function]}
                  refWrapper={[Function]}
                  size="md"
                >
                  <WrapperStyled
                    error="errorValue"
                    focused={false}
                    horizontalPadding="inner"
                    size="md"
                    verticalPadding="inner"
                  >
                    <span
                      className="emotion-2 emotion-3"
                      size="md"
                    >
                      <TextFieldStyled
                        defaultValue="Value"
                        error="errorValue"
                        horizontalMargin="zero"
                        horizontalMarginDirection="right"
                        horizontalPadding="inner"
                        inputMode="decimal"
                        onBlur={[Function]}
                        onChange={[Function]}
                        onClick={[Function]}
                        onFocus={[Function]}
                        onKeyPress={[Function]}
                        size="md"
                        verticalPadding="inner"
                      >
                        <input
                          className="emotion-4 emotion-5"
                          defaultValue="Value"
                          inputMode="decimal"
                          onBlur={[Function]}
                          onChange={[Function]}
                          onClick={[Function]}
                          onFocus={[Function]}
                          onKeyPress={[Function]}
                          size="md"
                        />
                      </TextFieldStyled>
                    </span>
                  </WrapperStyled>
                </Component>
              </OmittedComponent>
            </Component>
          </IMask(Component)>
        </TextFieldMasked>
        <BaseSlider
          addClickHandlers={[Function]}
          addSliderHandlers={[Function]}
          colorScheme="base"
          disabled={false}
          error="errorValue"
          max={100}
          min={0}
          mode="segmented"
          onChange={[MockFunction]}
          prefix=""
          removeClickHandlers={[Function]}
          removeSliderHandlers={[Function]}
          step={10}
          suffix=""
          transitionDuration={0.3}
          value="Value"
        >
          <SliderBasicStyled>
            <div
              className="emotion-6 emotion-7"
            >
              <TrackStyled
                disabled={false}
                error="errorValue"
                onMouseDown={[Function]}
                onTouchStart={[Function]}
              >
                <div
                  className="emotion-8 emotion-9"
                  disabled={false}
                  onMouseDown={[Function]}
                  onTouchStart={[Function]}
                >
                  <ProgressStyled
                    leftOffset="NaN%"
                    transitionDuration={0.3}
                  >
                    <div
                      className="emotion-10 emotion-11"
                    />
                  </ProgressStyled>
                  <ThumbStyled
                    leftOffset="NaN%"
                    transitionDuration={0.3}
                  >
                    <div
                      className="emotion-12 emotion-13"
                    />
                  </ThumbStyled>
                  <Segments
                    max={100}
                    min={0}
                    step={10}
                  >
                    <SegmentsStyled>
                      <div
                        className="emotion-14 emotion-15"
                      >
                        <SegmentStyled
                          key="10"
                          style={
                            Object {
                              "left": "10%",
                            }
                          }
                        >
                          <div
                            className="emotion-16 emotion-17"
                            style={
                              Object {
                                "left": "10%",
                              }
                            }
                          />
                        </SegmentStyled>
                        <SegmentStyled
                          key="20"
                          style={
                            Object {
                              "left": "20%",
                            }
                          }
                        >
                          <div
                            className="emotion-16 emotion-17"
                            style={
                              Object {
                                "left": "20%",
                              }
                            }
                          />
                        </SegmentStyled>
                        <SegmentStyled
                          key="30"
                          style={
                            Object {
                              "left": "30%",
                            }
                          }
                        >
                          <div
                            className="emotion-16 emotion-17"
                            style={
                              Object {
                                "left": "30%",
                              }
                            }
                          />
                        </SegmentStyled>
                        <SegmentStyled
                          key="40"
                          style={
                            Object {
                              "left": "40%",
                            }
                          }
                        >
                          <div
                            className="emotion-16 emotion-17"
                            style={
                              Object {
                                "left": "40%",
                              }
                            }
                          />
                        </SegmentStyled>
                        <SegmentStyled
                          key="50"
                          style={
                            Object {
                              "left": "50%",
                            }
                          }
                        >
                          <div
                            className="emotion-16 emotion-17"
                            style={
                              Object {
                                "left": "50%",
                              }
                            }
                          />
                        </SegmentStyled>
                        <SegmentStyled
                          key="60"
                          style={
                            Object {
                              "left": "60%",
                            }
                          }
                        >
                          <div
                            className="emotion-16 emotion-17"
                            style={
                              Object {
                                "left": "60%",
                              }
                            }
                          />
                        </SegmentStyled>
                        <SegmentStyled
                          key="70"
                          style={
                            Object {
                              "left": "70%",
                            }
                          }
                        >
                          <div
                            className="emotion-16 emotion-17"
                            style={
                              Object {
                                "left": "70%",
                              }
                            }
                          />
                        </SegmentStyled>
                        <SegmentStyled
                          key="80"
                          style={
                            Object {
                              "left": "80%",
                            }
                          }
                        >
                          <div
                            className="emotion-16 emotion-17"
                            style={
                              Object {
                                "left": "80%",
                              }
                            }
                          />
                        </SegmentStyled>
                        <SegmentStyled
                          key="90"
                          style={
                            Object {
                              "left": "90%",
                            }
                          }
                        >
                          <div
                            className="emotion-16 emotion-17"
                            style={
                              Object {
                                "left": "90%",
                              }
                            }
                          />
                        </SegmentStyled>
                      </div>
                    </SegmentsStyled>
                  </Segments>
                </div>
              </TrackStyled>
            </div>
          </SliderBasicStyled>
        </BaseSlider>
      </div>
    </SliderStyled>
    <Boundaries
      max={100}
      min={0}
      prefix="prefix "
      size="md"
      suffix=" suffix"
    >
      <BoundariesStyled
        colorScheme="secondary"
        size="sm"
        verticalMargin="micro"
      >
        <p
          className="emotion-34 emotion-35"
          size="sm"
        >
          <span>
            prefix 0 suffix
          </span>
          <span>
            prefix 100 suffix
          </span>
        </p>
      </BoundariesStyled>
    </Boundaries>
  </Component>
</OmittedComponent>
`;
